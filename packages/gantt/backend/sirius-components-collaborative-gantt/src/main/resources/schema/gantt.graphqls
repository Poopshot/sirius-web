extend type Subscription {
  ganttEvent(input: GanttEventInput!): GanttEventPayload!
}

input GanttEventInput {
  id: ID!
  editingContextId: ID!
  ganttId: ID!
}

union GanttEventPayload = ErrorPayload | SubscribersUpdatedEventPayload | GanttRefreshedEventPayload

type GanttRefreshedEventPayload {
  id: ID!
  gantt: Gantt!
}

type Gantt implements Representation {
  id: ID!
  metadata: RepresentationMetadata!
  targetObjectId: ID!
  tasks: [Task!]!
}

type Task {
  id: ID!
  descriptionId: ID!
  targetObjectId: String!
  detail: TaskDetail!
  style: TaskStyle
  subTasks: [Task!]
  dependencies: [Task!]
}

type TaskDetail {
  name: String!
  description: String!
  type: TaskType!
  startDate: String!
  endDate: String!
  progress: Int!
  assignee: String
}

type TaskStyle {
  labelColor: String!
  backgroundColor: String!
  progressColor: String!
}

enum TaskType {
  TASK
  TASK_GROUP
  MILESTONE
}



